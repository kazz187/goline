// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: goline/v1/task.proto

package golinev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TaskState represents the current state of a task
type TaskState int32

const (
	// Default unspecified state
	TaskState_TASK_STATE_UNSPECIFIED TaskState = 0
	// Task is currently active and in progress
	TaskState_TASK_STATE_ACTIVE TaskState = 1
	// Task is paused and can be resumed
	TaskState_TASK_STATE_PAUSED TaskState = 2
	// Task has been completed
	TaskState_TASK_STATE_COMPLETED TaskState = 3
	// Task has been cancelled
	TaskState_TASK_STATE_CANCELLED TaskState = 4
	// Task encountered an error
	TaskState_TASK_STATE_ERROR TaskState = 5
)

// Enum value maps for TaskState.
var (
	TaskState_name = map[int32]string{
		0: "TASK_STATE_UNSPECIFIED",
		1: "TASK_STATE_ACTIVE",
		2: "TASK_STATE_PAUSED",
		3: "TASK_STATE_COMPLETED",
		4: "TASK_STATE_CANCELLED",
		5: "TASK_STATE_ERROR",
	}
	TaskState_value = map[string]int32{
		"TASK_STATE_UNSPECIFIED": 0,
		"TASK_STATE_ACTIVE":      1,
		"TASK_STATE_PAUSED":      2,
		"TASK_STATE_COMPLETED":   3,
		"TASK_STATE_CANCELLED":   4,
		"TASK_STATE_ERROR":       5,
	}
)

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}

func (x TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_goline_v1_task_proto_enumTypes[0].Descriptor()
}

func (TaskState) Type() protoreflect.EnumType {
	return &file_goline_v1_task_proto_enumTypes[0]
}

func (x TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskState.Descriptor instead.
func (TaskState) EnumDescriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{0}
}

// UserMessageType defines the type of user message
type UserMessageType int32

const (
	// Default unspecified type
	UserMessageType_USER_MESSAGE_TYPE_UNSPECIFIED UserMessageType = 0
	// User asked a question
	UserMessageType_USER_MESSAGE_TYPE_ASK UserMessageType = 1
	// User applied a suggestion
	UserMessageType_USER_MESSAGE_TYPE_APPLY UserMessageType = 2
	// User cancelled a suggestion
	UserMessageType_USER_MESSAGE_TYPE_CANCEL UserMessageType = 3
	// User saved a checkpoint
	UserMessageType_USER_MESSAGE_TYPE_CHECKPOINT_SAVE UserMessageType = 4
	// User restored a checkpoint
	UserMessageType_USER_MESSAGE_TYPE_CHECKPOINT_RESTORE UserMessageType = 5
	// User requested a diff
	UserMessageType_USER_MESSAGE_TYPE_DIFF UserMessageType = 6
)

// Enum value maps for UserMessageType.
var (
	UserMessageType_name = map[int32]string{
		0: "USER_MESSAGE_TYPE_UNSPECIFIED",
		1: "USER_MESSAGE_TYPE_ASK",
		2: "USER_MESSAGE_TYPE_APPLY",
		3: "USER_MESSAGE_TYPE_CANCEL",
		4: "USER_MESSAGE_TYPE_CHECKPOINT_SAVE",
		5: "USER_MESSAGE_TYPE_CHECKPOINT_RESTORE",
		6: "USER_MESSAGE_TYPE_DIFF",
	}
	UserMessageType_value = map[string]int32{
		"USER_MESSAGE_TYPE_UNSPECIFIED":        0,
		"USER_MESSAGE_TYPE_ASK":                1,
		"USER_MESSAGE_TYPE_APPLY":              2,
		"USER_MESSAGE_TYPE_CANCEL":             3,
		"USER_MESSAGE_TYPE_CHECKPOINT_SAVE":    4,
		"USER_MESSAGE_TYPE_CHECKPOINT_RESTORE": 5,
		"USER_MESSAGE_TYPE_DIFF":               6,
	}
)

func (x UserMessageType) Enum() *UserMessageType {
	p := new(UserMessageType)
	*p = x
	return p
}

func (x UserMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_goline_v1_task_proto_enumTypes[1].Descriptor()
}

func (UserMessageType) Type() protoreflect.EnumType {
	return &file_goline_v1_task_proto_enumTypes[1]
}

func (x UserMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserMessageType.Descriptor instead.
func (UserMessageType) EnumDescriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{1}
}

// ModificationType defines how a file was modified
type ModificationType int32

const (
	// Default unspecified type
	ModificationType_MODIFICATION_TYPE_UNSPECIFIED ModificationType = 0
	// File was created
	ModificationType_MODIFICATION_TYPE_CREATE ModificationType = 1
	// File was updated
	ModificationType_MODIFICATION_TYPE_UPDATE ModificationType = 2
	// File was deleted
	ModificationType_MODIFICATION_TYPE_DELETE ModificationType = 3
	// File was renamed
	ModificationType_MODIFICATION_TYPE_RENAME ModificationType = 4
)

// Enum value maps for ModificationType.
var (
	ModificationType_name = map[int32]string{
		0: "MODIFICATION_TYPE_UNSPECIFIED",
		1: "MODIFICATION_TYPE_CREATE",
		2: "MODIFICATION_TYPE_UPDATE",
		3: "MODIFICATION_TYPE_DELETE",
		4: "MODIFICATION_TYPE_RENAME",
	}
	ModificationType_value = map[string]int32{
		"MODIFICATION_TYPE_UNSPECIFIED": 0,
		"MODIFICATION_TYPE_CREATE":      1,
		"MODIFICATION_TYPE_UPDATE":      2,
		"MODIFICATION_TYPE_DELETE":      3,
		"MODIFICATION_TYPE_RENAME":      4,
	}
)

func (x ModificationType) Enum() *ModificationType {
	p := new(ModificationType)
	*p = x
	return p
}

func (x ModificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_goline_v1_task_proto_enumTypes[2].Descriptor()
}

func (ModificationType) Type() protoreflect.EnumType {
	return &file_goline_v1_task_proto_enumTypes[2]
}

func (x ModificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModificationType.Descriptor instead.
func (ModificationType) EnumDescriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{2}
}

// CheckpointOperationType defines the type of checkpoint operation
type CheckpointOperationType int32

const (
	// Default unspecified type
	CheckpointOperationType_CHECKPOINT_OPERATION_TYPE_UNSPECIFIED CheckpointOperationType = 0
	// Checkpoint was saved
	CheckpointOperationType_CHECKPOINT_OPERATION_TYPE_SAVE CheckpointOperationType = 1
	// Checkpoint was restored
	CheckpointOperationType_CHECKPOINT_OPERATION_TYPE_RESTORE CheckpointOperationType = 2
)

// Enum value maps for CheckpointOperationType.
var (
	CheckpointOperationType_name = map[int32]string{
		0: "CHECKPOINT_OPERATION_TYPE_UNSPECIFIED",
		1: "CHECKPOINT_OPERATION_TYPE_SAVE",
		2: "CHECKPOINT_OPERATION_TYPE_RESTORE",
	}
	CheckpointOperationType_value = map[string]int32{
		"CHECKPOINT_OPERATION_TYPE_UNSPECIFIED": 0,
		"CHECKPOINT_OPERATION_TYPE_SAVE":        1,
		"CHECKPOINT_OPERATION_TYPE_RESTORE":     2,
	}
)

func (x CheckpointOperationType) Enum() *CheckpointOperationType {
	p := new(CheckpointOperationType)
	*p = x
	return p
}

func (x CheckpointOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckpointOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_goline_v1_task_proto_enumTypes[3].Descriptor()
}

func (CheckpointOperationType) Type() protoreflect.EnumType {
	return &file_goline_v1_task_proto_enumTypes[3]
}

func (x CheckpointOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckpointOperationType.Descriptor instead.
func (CheckpointOperationType) EnumDescriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{3}
}

// SystemEventType defines the type of system event
type SystemEventType int32

const (
	// Default unspecified type
	SystemEventType_SYSTEM_EVENT_TYPE_UNSPECIFIED SystemEventType = 0
	// Task was started
	SystemEventType_SYSTEM_EVENT_TYPE_TASK_STARTED SystemEventType = 1
	// Task was paused
	SystemEventType_SYSTEM_EVENT_TYPE_TASK_PAUSED SystemEventType = 2
	// Task was resumed
	SystemEventType_SYSTEM_EVENT_TYPE_TASK_RESUMED SystemEventType = 3
	// Task was completed
	SystemEventType_SYSTEM_EVENT_TYPE_TASK_COMPLETED SystemEventType = 4
	// Task encountered an error
	SystemEventType_SYSTEM_EVENT_TYPE_TASK_ERROR SystemEventType = 5
	// General information message
	SystemEventType_SYSTEM_EVENT_TYPE_INFO SystemEventType = 6
	// Warning message
	SystemEventType_SYSTEM_EVENT_TYPE_WARNING SystemEventType = 7
	// Error message
	SystemEventType_SYSTEM_EVENT_TYPE_ERROR SystemEventType = 8
)

// Enum value maps for SystemEventType.
var (
	SystemEventType_name = map[int32]string{
		0: "SYSTEM_EVENT_TYPE_UNSPECIFIED",
		1: "SYSTEM_EVENT_TYPE_TASK_STARTED",
		2: "SYSTEM_EVENT_TYPE_TASK_PAUSED",
		3: "SYSTEM_EVENT_TYPE_TASK_RESUMED",
		4: "SYSTEM_EVENT_TYPE_TASK_COMPLETED",
		5: "SYSTEM_EVENT_TYPE_TASK_ERROR",
		6: "SYSTEM_EVENT_TYPE_INFO",
		7: "SYSTEM_EVENT_TYPE_WARNING",
		8: "SYSTEM_EVENT_TYPE_ERROR",
	}
	SystemEventType_value = map[string]int32{
		"SYSTEM_EVENT_TYPE_UNSPECIFIED":    0,
		"SYSTEM_EVENT_TYPE_TASK_STARTED":   1,
		"SYSTEM_EVENT_TYPE_TASK_PAUSED":    2,
		"SYSTEM_EVENT_TYPE_TASK_RESUMED":   3,
		"SYSTEM_EVENT_TYPE_TASK_COMPLETED": 4,
		"SYSTEM_EVENT_TYPE_TASK_ERROR":     5,
		"SYSTEM_EVENT_TYPE_INFO":           6,
		"SYSTEM_EVENT_TYPE_WARNING":        7,
		"SYSTEM_EVENT_TYPE_ERROR":          8,
	}
)

func (x SystemEventType) Enum() *SystemEventType {
	p := new(SystemEventType)
	*p = x
	return p
}

func (x SystemEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_goline_v1_task_proto_enumTypes[4].Descriptor()
}

func (SystemEventType) Type() protoreflect.EnumType {
	return &file_goline_v1_task_proto_enumTypes[4]
}

func (x SystemEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemEventType.Descriptor instead.
func (SystemEventType) EnumDescriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{4}
}

// Task contains the essential metadata about a task
// This is stored in the main [taskID].pb file
type Task struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the task
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Current state of the task
	State TaskState `protobuf:"varint,2,opt,name=state,proto3,enum=goline.v1.TaskState" json:"state,omitempty"`
	// Terminal ID associated with this task
	TerminalId string `protobuf:"bytes,3,opt,name=terminal_id,json=terminalId,proto3" json:"terminal_id,omitempty"`
	// Provider used for this task (e.g., "anthropic", "deepseek")
	Provider string `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	// Model/engine used for this task
	Model string `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`
	// Initial prompt that started the task
	InitialPrompt string `protobuf:"bytes,6,opt,name=initial_prompt,json=initialPrompt,proto3" json:"initial_prompt,omitempty"`
	// Timestamp when the task was created (in RFC 3339 format)
	CreatedAt string `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp when the task was last updated (in RFC 3339 format)
	UpdatedAt string `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Directory where the task was executed
	WorkingDirectory string `protobuf:"bytes,9,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
	// List of checkpoint IDs associated with this task
	CheckpointIds []string `protobuf:"bytes,10,rep,name=checkpoint_ids,json=checkpointIds,proto3" json:"checkpoint_ids,omitempty"`
	// Sequence number for the next event file
	NextEventSequence uint32 `protobuf:"varint,11,opt,name=next_event_sequence,json=nextEventSequence,proto3" json:"next_event_sequence,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_goline_v1_task_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_goline_v1_task_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetState() TaskState {
	if x != nil {
		return x.State
	}
	return TaskState_TASK_STATE_UNSPECIFIED
}

func (x *Task) GetTerminalId() string {
	if x != nil {
		return x.TerminalId
	}
	return ""
}

func (x *Task) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Task) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Task) GetInitialPrompt() string {
	if x != nil {
		return x.InitialPrompt
	}
	return ""
}

func (x *Task) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Task) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Task) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

func (x *Task) GetCheckpointIds() []string {
	if x != nil {
		return x.CheckpointIds
	}
	return nil
}

func (x *Task) GetNextEventSequence() uint32 {
	if x != nil {
		return x.NextEventSequence
	}
	return 0
}

// TaskEvent represents a single event in the task's history
// These are stored in append-only log files like [taskID]/00001.pb
type TaskEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for this event
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp when this event occurred (in RFC 3339 format)
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Type of event
	//
	// Types that are valid to be assigned to Event:
	//
	//	*TaskEvent_UserMessage
	//	*TaskEvent_AiResponse
	//	*TaskEvent_ToolCall
	//	*TaskEvent_FileModification
	//	*TaskEvent_Checkpoint
	//	*TaskEvent_SystemEvent
	Event         isTaskEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskEvent) Reset() {
	*x = TaskEvent{}
	mi := &file_goline_v1_task_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEvent) ProtoMessage() {}

func (x *TaskEvent) ProtoReflect() protoreflect.Message {
	mi := &file_goline_v1_task_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEvent.ProtoReflect.Descriptor instead.
func (*TaskEvent) Descriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{1}
}

func (x *TaskEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskEvent) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *TaskEvent) GetEvent() isTaskEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *TaskEvent) GetUserMessage() *UserMessage {
	if x != nil {
		if x, ok := x.Event.(*TaskEvent_UserMessage); ok {
			return x.UserMessage
		}
	}
	return nil
}

func (x *TaskEvent) GetAiResponse() *AIResponse {
	if x != nil {
		if x, ok := x.Event.(*TaskEvent_AiResponse); ok {
			return x.AiResponse
		}
	}
	return nil
}

func (x *TaskEvent) GetToolCall() *ToolCallEvent {
	if x != nil {
		if x, ok := x.Event.(*TaskEvent_ToolCall); ok {
			return x.ToolCall
		}
	}
	return nil
}

func (x *TaskEvent) GetFileModification() *FileModificationEvent {
	if x != nil {
		if x, ok := x.Event.(*TaskEvent_FileModification); ok {
			return x.FileModification
		}
	}
	return nil
}

func (x *TaskEvent) GetCheckpoint() *CheckpointEvent {
	if x != nil {
		if x, ok := x.Event.(*TaskEvent_Checkpoint); ok {
			return x.Checkpoint
		}
	}
	return nil
}

func (x *TaskEvent) GetSystemEvent() *SystemEvent {
	if x != nil {
		if x, ok := x.Event.(*TaskEvent_SystemEvent); ok {
			return x.SystemEvent
		}
	}
	return nil
}

type isTaskEvent_Event interface {
	isTaskEvent_Event()
}

type TaskEvent_UserMessage struct {
	UserMessage *UserMessage `protobuf:"bytes,3,opt,name=user_message,json=userMessage,proto3,oneof"`
}

type TaskEvent_AiResponse struct {
	AiResponse *AIResponse `protobuf:"bytes,4,opt,name=ai_response,json=aiResponse,proto3,oneof"`
}

type TaskEvent_ToolCall struct {
	ToolCall *ToolCallEvent `protobuf:"bytes,5,opt,name=tool_call,json=toolCall,proto3,oneof"`
}

type TaskEvent_FileModification struct {
	FileModification *FileModificationEvent `protobuf:"bytes,6,opt,name=file_modification,json=fileModification,proto3,oneof"`
}

type TaskEvent_Checkpoint struct {
	Checkpoint *CheckpointEvent `protobuf:"bytes,7,opt,name=checkpoint,proto3,oneof"`
}

type TaskEvent_SystemEvent struct {
	SystemEvent *SystemEvent `protobuf:"bytes,8,opt,name=system_event,json=systemEvent,proto3,oneof"`
}

func (*TaskEvent_UserMessage) isTaskEvent_Event() {}

func (*TaskEvent_AiResponse) isTaskEvent_Event() {}

func (*TaskEvent_ToolCall) isTaskEvent_Event() {}

func (*TaskEvent_FileModification) isTaskEvent_Event() {}

func (*TaskEvent_Checkpoint) isTaskEvent_Event() {}

func (*TaskEvent_SystemEvent) isTaskEvent_Event() {}

// UserMessage represents a message from the user
type UserMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Content of the user's message
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Type of user message
	Type          UserMessageType `protobuf:"varint,2,opt,name=type,proto3,enum=goline.v1.UserMessageType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserMessage) Reset() {
	*x = UserMessage{}
	mi := &file_goline_v1_task_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMessage) ProtoMessage() {}

func (x *UserMessage) ProtoReflect() protoreflect.Message {
	mi := &file_goline_v1_task_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMessage.ProtoReflect.Descriptor instead.
func (*UserMessage) Descriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{2}
}

func (x *UserMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UserMessage) GetType() UserMessageType {
	if x != nil {
		return x.Type
	}
	return UserMessageType_USER_MESSAGE_TYPE_UNSPECIFIED
}

// AIResponse represents a response from the AI
type AIResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Content of the AI's response
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Whether this response contains a suggestion that can be applied
	HasSuggestion bool `protobuf:"varint,2,opt,name=has_suggestion,json=hasSuggestion,proto3" json:"has_suggestion,omitempty"`
	// Suggestion ID if this response contains a suggestion
	SuggestionId  string `protobuf:"bytes,3,opt,name=suggestion_id,json=suggestionId,proto3" json:"suggestion_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIResponse) Reset() {
	*x = AIResponse{}
	mi := &file_goline_v1_task_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIResponse) ProtoMessage() {}

func (x *AIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goline_v1_task_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIResponse.ProtoReflect.Descriptor instead.
func (*AIResponse) Descriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{3}
}

func (x *AIResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AIResponse) GetHasSuggestion() bool {
	if x != nil {
		return x.HasSuggestion
	}
	return false
}

func (x *AIResponse) GetSuggestionId() string {
	if x != nil {
		return x.SuggestionId
	}
	return ""
}

// ToolCallEvent represents a call to a tool by the AI
type ToolCallEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the tool that was called
	ToolName string `protobuf:"bytes,1,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"`
	// Arguments passed to the tool
	Arguments string `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
	// Result returned by the tool
	Result string `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	// Whether the tool call was successful
	Success bool `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if the tool call failed
	ErrorMessage  string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToolCallEvent) Reset() {
	*x = ToolCallEvent{}
	mi := &file_goline_v1_task_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolCallEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolCallEvent) ProtoMessage() {}

func (x *ToolCallEvent) ProtoReflect() protoreflect.Message {
	mi := &file_goline_v1_task_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolCallEvent.ProtoReflect.Descriptor instead.
func (*ToolCallEvent) Descriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{4}
}

func (x *ToolCallEvent) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *ToolCallEvent) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

func (x *ToolCallEvent) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ToolCallEvent) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ToolCallEvent) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// FileModificationEvent represents a change to a file
type FileModificationEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to the file that was modified
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// Type of modification
	Type ModificationType `protobuf:"varint,2,opt,name=type,proto3,enum=goline.v1.ModificationType" json:"type,omitempty"`
	// Diff of the changes (if applicable)
	Diff string `protobuf:"bytes,3,opt,name=diff,proto3" json:"diff,omitempty"`
	// Hash of the file content after modification
	ContentHash   string `protobuf:"bytes,4,opt,name=content_hash,json=contentHash,proto3" json:"content_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileModificationEvent) Reset() {
	*x = FileModificationEvent{}
	mi := &file_goline_v1_task_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileModificationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileModificationEvent) ProtoMessage() {}

func (x *FileModificationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_goline_v1_task_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileModificationEvent.ProtoReflect.Descriptor instead.
func (*FileModificationEvent) Descriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{5}
}

func (x *FileModificationEvent) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileModificationEvent) GetType() ModificationType {
	if x != nil {
		return x.Type
	}
	return ModificationType_MODIFICATION_TYPE_UNSPECIFIED
}

func (x *FileModificationEvent) GetDiff() string {
	if x != nil {
		return x.Diff
	}
	return ""
}

func (x *FileModificationEvent) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

// CheckpointEvent represents a checkpoint operation
type CheckpointEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of checkpoint operation
	OperationType CheckpointOperationType `protobuf:"varint,1,opt,name=operation_type,json=operationType,proto3,enum=goline.v1.CheckpointOperationType" json:"operation_type,omitempty"`
	// Checkpoint ID
	CheckpointId string `protobuf:"bytes,2,opt,name=checkpoint_id,json=checkpointId,proto3" json:"checkpoint_id,omitempty"`
	// Human-readable name for this checkpoint
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of this checkpoint
	Description   string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckpointEvent) Reset() {
	*x = CheckpointEvent{}
	mi := &file_goline_v1_task_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckpointEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointEvent) ProtoMessage() {}

func (x *CheckpointEvent) ProtoReflect() protoreflect.Message {
	mi := &file_goline_v1_task_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointEvent.ProtoReflect.Descriptor instead.
func (*CheckpointEvent) Descriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{6}
}

func (x *CheckpointEvent) GetOperationType() CheckpointOperationType {
	if x != nil {
		return x.OperationType
	}
	return CheckpointOperationType_CHECKPOINT_OPERATION_TYPE_UNSPECIFIED
}

func (x *CheckpointEvent) GetCheckpointId() string {
	if x != nil {
		return x.CheckpointId
	}
	return ""
}

func (x *CheckpointEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CheckpointEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// SystemEvent represents a system message or notification
type SystemEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Content of the system message
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Type of system event
	Type          SystemEventType `protobuf:"varint,2,opt,name=type,proto3,enum=goline.v1.SystemEventType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemEvent) Reset() {
	*x = SystemEvent{}
	mi := &file_goline_v1_task_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemEvent) ProtoMessage() {}

func (x *SystemEvent) ProtoReflect() protoreflect.Message {
	mi := &file_goline_v1_task_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemEvent.ProtoReflect.Descriptor instead.
func (*SystemEvent) Descriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{7}
}

func (x *SystemEvent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SystemEvent) GetType() SystemEventType {
	if x != nil {
		return x.Type
	}
	return SystemEventType_SYSTEM_EVENT_TYPE_UNSPECIFIED
}

// Checkpoint represents a saved state of the task
type Checkpoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for this checkpoint
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human-readable name for this checkpoint
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of this checkpoint
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Timestamp when this checkpoint was created (in RFC 3339 format)
	Timestamp string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// List of file snapshots in this checkpoint
	Files []*FileSnapshot `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
	// Git status at this point (if applicable)
	GitStatus     *GitStatus `protobuf:"bytes,6,opt,name=git_status,json=gitStatus,proto3" json:"git_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Checkpoint) Reset() {
	*x = Checkpoint{}
	mi := &file_goline_v1_task_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Checkpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint) ProtoMessage() {}

func (x *Checkpoint) ProtoReflect() protoreflect.Message {
	mi := &file_goline_v1_task_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint.ProtoReflect.Descriptor instead.
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{8}
}

func (x *Checkpoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Checkpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Checkpoint) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Checkpoint) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Checkpoint) GetFiles() []*FileSnapshot {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *Checkpoint) GetGitStatus() *GitStatus {
	if x != nil {
		return x.GitStatus
	}
	return nil
}

// FileSnapshot represents the state of a file at a point in time
type FileSnapshot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to the file
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// Content of the file
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// Hash of the file content (for quick comparison)
	ContentHash   string `protobuf:"bytes,3,opt,name=content_hash,json=contentHash,proto3" json:"content_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileSnapshot) Reset() {
	*x = FileSnapshot{}
	mi := &file_goline_v1_task_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSnapshot) ProtoMessage() {}

func (x *FileSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_goline_v1_task_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSnapshot.ProtoReflect.Descriptor instead.
func (*FileSnapshot) Descriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{9}
}

func (x *FileSnapshot) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileSnapshot) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *FileSnapshot) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

// GitStatus represents the git status of the workspace
type GitStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current branch
	Branch string `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	// Current commit hash
	CommitHash string `protobuf:"bytes,2,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	// Whether there are uncommitted changes
	HasUncommittedChanges bool `protobuf:"varint,3,opt,name=has_uncommitted_changes,json=hasUncommittedChanges,proto3" json:"has_uncommitted_changes,omitempty"`
	// List of modified files
	ModifiedFiles []string `protobuf:"bytes,4,rep,name=modified_files,json=modifiedFiles,proto3" json:"modified_files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitStatus) Reset() {
	*x = GitStatus{}
	mi := &file_goline_v1_task_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitStatus) ProtoMessage() {}

func (x *GitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_goline_v1_task_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitStatus.ProtoReflect.Descriptor instead.
func (*GitStatus) Descriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{10}
}

func (x *GitStatus) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GitStatus) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *GitStatus) GetHasUncommittedChanges() bool {
	if x != nil {
		return x.HasUncommittedChanges
	}
	return false
}

func (x *GitStatus) GetModifiedFiles() []string {
	if x != nil {
		return x.ModifiedFiles
	}
	return nil
}

// TaskList represents a collection of tasks
type TaskList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of task summaries
	Tasks         []*TaskSummary `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskList) Reset() {
	*x = TaskList{}
	mi := &file_goline_v1_task_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskList) ProtoMessage() {}

func (x *TaskList) ProtoReflect() protoreflect.Message {
	mi := &file_goline_v1_task_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskList.ProtoReflect.Descriptor instead.
func (*TaskList) Descriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{11}
}

func (x *TaskList) GetTasks() []*TaskSummary {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// TaskSummary contains a summary of a task (for listing purposes)
type TaskSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the task
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Current state of the task
	State TaskState `protobuf:"varint,2,opt,name=state,proto3,enum=goline.v1.TaskState" json:"state,omitempty"`
	// Initial prompt that started the task (truncated)
	InitialPromptPreview string `protobuf:"bytes,3,opt,name=initial_prompt_preview,json=initialPromptPreview,proto3" json:"initial_prompt_preview,omitempty"`
	// Timestamp when the task was created (in RFC 3339 format)
	CreatedAt string `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp when the task was last updated (in RFC 3339 format)
	UpdatedAt string `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Terminal ID associated with this task
	TerminalId    string `protobuf:"bytes,6,opt,name=terminal_id,json=terminalId,proto3" json:"terminal_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskSummary) Reset() {
	*x = TaskSummary{}
	mi := &file_goline_v1_task_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSummary) ProtoMessage() {}

func (x *TaskSummary) ProtoReflect() protoreflect.Message {
	mi := &file_goline_v1_task_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSummary.ProtoReflect.Descriptor instead.
func (*TaskSummary) Descriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{12}
}

func (x *TaskSummary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskSummary) GetState() TaskState {
	if x != nil {
		return x.State
	}
	return TaskState_TASK_STATE_UNSPECIFIED
}

func (x *TaskSummary) GetInitialPromptPreview() string {
	if x != nil {
		return x.InitialPromptPreview
	}
	return ""
}

func (x *TaskSummary) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TaskSummary) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *TaskSummary) GetTerminalId() string {
	if x != nil {
		return x.TerminalId
	}
	return ""
}

// TaskEventBatch represents a batch of events stored in a single file
// This is the root message for [taskID]/NNNNN.pb files
type TaskEventBatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Task ID this batch belongs to
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Sequence number of this batch
	Sequence uint32 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Events in this batch
	Events        []*TaskEvent `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskEventBatch) Reset() {
	*x = TaskEventBatch{}
	mi := &file_goline_v1_task_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskEventBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEventBatch) ProtoMessage() {}

func (x *TaskEventBatch) ProtoReflect() protoreflect.Message {
	mi := &file_goline_v1_task_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEventBatch.ProtoReflect.Descriptor instead.
func (*TaskEventBatch) Descriptor() ([]byte, []int) {
	return file_goline_v1_task_proto_rawDescGZIP(), []int{13}
}

func (x *TaskEventBatch) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskEventBatch) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *TaskEventBatch) GetEvents() []*TaskEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

var File_goline_v1_task_proto protoreflect.FileDescriptor

var file_goline_v1_task_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x22, 0xfe, 0x02, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6e, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0xbe, 0x03, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3b,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x61,
	0x69, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x49, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4f,
	0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x57, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x72, 0x0a, 0x0a,
	0x41, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61,
	0x73, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xa1, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x69, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a,
	0x0b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x67, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x68, 0x0a,
	0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0xa3, 0x01, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36,
	0x0a, 0x17, 0x68, 0x61, 0x73, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x38, 0x0a,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0x9f, 0x01,
	0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x55,
	0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x2a,
	0xf7, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x4b, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x1c,
	0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x41, 0x56,
	0x45, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a,
	0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x10, 0x06, 0x2a, 0xad, 0x01, 0x0a, 0x10, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x1d, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x2a, 0x8f, 0x01, 0x0a, 0x17, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x2a, 0xbf, 0x02, 0x0a, 0x0f,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x44, 0x10, 0x03, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x06, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x07,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x42, 0x9a, 0x01,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x42,
	0x09, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x7a, 0x7a, 0x31, 0x38, 0x37,
	0x2f, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x67,
	0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x47, 0x58, 0x58, 0xaa, 0x02, 0x09,
	0x47, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x09, 0x47, 0x6f, 0x6c, 0x69,
	0x6e, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x47, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a,
	0x47, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_goline_v1_task_proto_rawDescOnce sync.Once
	file_goline_v1_task_proto_rawDescData []byte
)

func file_goline_v1_task_proto_rawDescGZIP() []byte {
	file_goline_v1_task_proto_rawDescOnce.Do(func() {
		file_goline_v1_task_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_goline_v1_task_proto_rawDesc), len(file_goline_v1_task_proto_rawDesc)))
	})
	return file_goline_v1_task_proto_rawDescData
}

var file_goline_v1_task_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_goline_v1_task_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_goline_v1_task_proto_goTypes = []any{
	(TaskState)(0),                // 0: goline.v1.TaskState
	(UserMessageType)(0),          // 1: goline.v1.UserMessageType
	(ModificationType)(0),         // 2: goline.v1.ModificationType
	(CheckpointOperationType)(0),  // 3: goline.v1.CheckpointOperationType
	(SystemEventType)(0),          // 4: goline.v1.SystemEventType
	(*Task)(nil),                  // 5: goline.v1.Task
	(*TaskEvent)(nil),             // 6: goline.v1.TaskEvent
	(*UserMessage)(nil),           // 7: goline.v1.UserMessage
	(*AIResponse)(nil),            // 8: goline.v1.AIResponse
	(*ToolCallEvent)(nil),         // 9: goline.v1.ToolCallEvent
	(*FileModificationEvent)(nil), // 10: goline.v1.FileModificationEvent
	(*CheckpointEvent)(nil),       // 11: goline.v1.CheckpointEvent
	(*SystemEvent)(nil),           // 12: goline.v1.SystemEvent
	(*Checkpoint)(nil),            // 13: goline.v1.Checkpoint
	(*FileSnapshot)(nil),          // 14: goline.v1.FileSnapshot
	(*GitStatus)(nil),             // 15: goline.v1.GitStatus
	(*TaskList)(nil),              // 16: goline.v1.TaskList
	(*TaskSummary)(nil),           // 17: goline.v1.TaskSummary
	(*TaskEventBatch)(nil),        // 18: goline.v1.TaskEventBatch
}
var file_goline_v1_task_proto_depIdxs = []int32{
	0,  // 0: goline.v1.Task.state:type_name -> goline.v1.TaskState
	7,  // 1: goline.v1.TaskEvent.user_message:type_name -> goline.v1.UserMessage
	8,  // 2: goline.v1.TaskEvent.ai_response:type_name -> goline.v1.AIResponse
	9,  // 3: goline.v1.TaskEvent.tool_call:type_name -> goline.v1.ToolCallEvent
	10, // 4: goline.v1.TaskEvent.file_modification:type_name -> goline.v1.FileModificationEvent
	11, // 5: goline.v1.TaskEvent.checkpoint:type_name -> goline.v1.CheckpointEvent
	12, // 6: goline.v1.TaskEvent.system_event:type_name -> goline.v1.SystemEvent
	1,  // 7: goline.v1.UserMessage.type:type_name -> goline.v1.UserMessageType
	2,  // 8: goline.v1.FileModificationEvent.type:type_name -> goline.v1.ModificationType
	3,  // 9: goline.v1.CheckpointEvent.operation_type:type_name -> goline.v1.CheckpointOperationType
	4,  // 10: goline.v1.SystemEvent.type:type_name -> goline.v1.SystemEventType
	14, // 11: goline.v1.Checkpoint.files:type_name -> goline.v1.FileSnapshot
	15, // 12: goline.v1.Checkpoint.git_status:type_name -> goline.v1.GitStatus
	17, // 13: goline.v1.TaskList.tasks:type_name -> goline.v1.TaskSummary
	0,  // 14: goline.v1.TaskSummary.state:type_name -> goline.v1.TaskState
	6,  // 15: goline.v1.TaskEventBatch.events:type_name -> goline.v1.TaskEvent
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_goline_v1_task_proto_init() }
func file_goline_v1_task_proto_init() {
	if File_goline_v1_task_proto != nil {
		return
	}
	file_goline_v1_task_proto_msgTypes[1].OneofWrappers = []any{
		(*TaskEvent_UserMessage)(nil),
		(*TaskEvent_AiResponse)(nil),
		(*TaskEvent_ToolCall)(nil),
		(*TaskEvent_FileModification)(nil),
		(*TaskEvent_Checkpoint)(nil),
		(*TaskEvent_SystemEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_goline_v1_task_proto_rawDesc), len(file_goline_v1_task_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_goline_v1_task_proto_goTypes,
		DependencyIndexes: file_goline_v1_task_proto_depIdxs,
		EnumInfos:         file_goline_v1_task_proto_enumTypes,
		MessageInfos:      file_goline_v1_task_proto_msgTypes,
	}.Build()
	File_goline_v1_task_proto = out.File
	file_goline_v1_task_proto_goTypes = nil
	file_goline_v1_task_proto_depIdxs = nil
}
